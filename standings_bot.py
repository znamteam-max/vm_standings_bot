import os, time, datetime as dt, sys, traceback
from zoneinfo import ZoneInfo
from telegram import Bot, error as tg_error
from nba_api.stats.endpoints import leaguestandingsv3
from requests.exceptions import HTTPError, ReadTimeout, ConnectionError as ReqConnError

TEAM_RU = {
    "ATL":"–ê—Ç–ª–∞–Ω—Ç–∞","BOS":"–ë–æ—Å—Ç–æ–Ω","BKN":"–ë—Ä—É–∫–ª–∏–Ω","CHA":"–®–∞—Ä–ª–æ—Ç—Ç","CHI":"–ß–∏–∫–∞–≥–æ",
    "CLE":"–ö–ª–∏–≤–ª–µ–Ω–¥","DAL":"–î–∞–ª–ª–∞—Å","DEN":"–î–µ–Ω–≤–µ—Ä","DET":"–î–µ—Ç—Ä–æ–π—Ç","GSW":"–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç",
    "HOU":"–•—å—é—Å—Ç–æ–Ω","IND":"–ò–Ω–¥–∏–∞–Ω–∞","LAC":"–ö–ª–∏–ø–ø–µ—Ä—Å","LAL":"–õ–µ–π–∫–µ—Ä—Å","MEM":"–ú–µ–º—Ñ–∏—Å",
    "MIA":"–ú–∞–π–∞–º–∏","MIL":"–ú–∏–ª—É–æ–∫–∏","MIN":"–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞","NOP":"–ù—å—é-–û—Ä–ª–µ–∞–Ω","NYK":"–ù—å—é-–ô–æ—Ä–∫",
    "OKC":"–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏","ORL":"–û—Ä–ª–∞–Ω–¥–æ","PHI":"–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è","PHX":"–§–∏–Ω–∏–∫—Å",
    "POR":"–ü–æ—Ä—Ç–ª–µ–Ω–¥","SAC":"–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ","SAS":"–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ","TOR":"–¢–æ—Ä–æ–Ω—Ç–æ","UTA":"–Æ—Ç–∞","WAS":"–í–∞—à–∏–Ω–≥—Ç–æ–Ω"
}

def msk_now(): return dt.datetime.now(ZoneInfo("Europe/Moscow"))

def format_pct(x):
    try: return f"{float(x):.3f}".lstrip("0")
    except: return str(x)

def gb(leader_w, leader_l, w, l):
    return ((leader_w - w) + (l - leader_l)) / 2.0

def fetch_standings_with_retry(retries=4, pause=3):
    last_err = None
    for i in range(1, retries+1):
        try:
            df = leaguestandingsv3.LeagueStandingsV3().standings.get_data_frame()
            df = df.rename(columns={
                "TeamTricode":"tri","TeamName":"name","Conference":"conf","ConferenceRank":"rank_conf",
                "W":"w","L":"l","W_PCT":"pct","L10":"l10","STRK":"streak"
            })[["tri","name","conf","rank_conf","w","l","pct","l10","streak"]]
            df["rank_conf"] = df["rank_conf"].astype(int)
            df["w"] = df["w"].astype(int)
            df["l"] = df["l"].astype(int)
            print(f"‚úÖ Standings fetched on attempt {i}")
            return df
        except (HTTPError, ReadTimeout, ReqConnError) as e:
            last_err = e
            print(f"‚ö†Ô∏è  NBA fetch failed (attempt {i}/{retries}): {e}")
            time.sleep(pause)
        except Exception as e:
            last_err = e
            print("‚ùå Unexpected error while fetching standings:")
            traceback.print_exc()
            break
    raise SystemExit(f"Failed to fetch standings after {retries} attempts: {last_err}")

def build_block(df_conf, title):
    df_conf = df_conf.sort_values("rank_conf")
    lw, ll = int(df_conf.iloc[0]["w"]), int(df_conf.iloc[0]["l"])
    lines = [title]
    for _, r in df_conf.iterrows():
        name_ru = TEAM_RU.get(r["tri"], r["name"])
        w, l = int(r["w"]), int(r["l"])
        pct = format_pct(r["pct"])
        gb_str = f"{gb(lw, ll, w, l):.1f}"
        streak = r["streak"] if r["streak"] else "-"
        l10 = r["l10"] if r["l10"] else "-"
        lines.append(f"{int(r['rank_conf'])}) {name_ru} {w}‚Äì{l} ({pct}) GB {gb_str} ‚Äî {streak} ‚Äî L10: {l10}")
    return "\n".join(lines)

def build_message(df):
    months = ["—è–Ω–≤–∞—Ä—è","—Ñ–µ–≤—Ä–∞–ª—è","–º–∞—Ä—Ç–∞","–∞–ø—Ä–µ–ª—è","–º–∞—è","–∏—é–Ω—è","–∏—é–ª—è","–∞–≤–≥—É—Å—Ç–∞","—Å–µ–Ω—Ç—è–±—Ä—è","–æ–∫—Ç—è–±—Ä—è","–Ω–æ—è–±—Ä—è","–¥–µ–∫–∞–±—Ä—è"]
    now = msk_now()
    head = f"–ù–ë–ê ‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞ {now.day} {months[now.month-1]}"
    east = df[df["conf"].str.upper().str.startswith("E")]
    west = df[df["conf"].str.upper().str.startswith("W")]
    return f"{head}\n{build_block(east,'–í–æ—Å—Ç–æ–∫')}\n\n{build_block(west,'–ó–∞–ø–∞–¥')}"

def main():
    token = os.getenv("TG_TOKEN")
    chat_id = os.getenv("TG_CHAT_ID")
    dry = os.getenv("DRY_RUN","0") == "1"

    if not token: raise SystemExit("‚ùå TG_TOKEN is empty. –î–æ–±–∞–≤—å —Å–µ–∫—Ä–µ—Ç TG_TOKEN –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.")
    if not chat_id: raise SystemExit("‚ùå TG_CHAT_ID is empty. –î–æ–±–∞–≤—å —Å–µ–∫—Ä–µ—Ç TG_CHAT_ID (—Ñ–æ—Ä–º–∞—Ç -100...).")
    if not str(chat_id).strip().startswith("-100"):
        raise SystemExit("‚ùå TG_CHAT_ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100 (id –∫–∞–Ω–∞–ª–∞). –ü—Ä–æ–≤–µ—Ä—å –∑–Ω–∞—á–µ–Ω–∏–µ.")

    print("üîß Fetching standings...")
    df = fetch_standings_with_retry()

    msg = build_message(df)
    print("üì§ Message preview:\n" + ("\n".join(msg.splitlines()[:6]) + "\n..."))  # –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç

    if dry:
        print("DRY_RUN=1 ‚Üí –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return

    bot = Bot(token)
    try:
        bot.send_message(chat_id=chat_id, text=msg, disable_web_page_preview=True)
        print("‚úÖ Sent to Telegram.")
    except tg_error.Unauthorized as e:
        raise SystemExit("‚ùå Telegram Unauthorized: –Ω–µ–≤–µ—Ä–Ω—ã–π TG_TOKEN (–ø—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω —É BotFather).")
    except tg_error.BadRequest as e:
        raise SystemExit("‚ùå Telegram BadRequest: " + str(e) + " ‚Äî –ø—Ä–æ–≤–µ—Ä—å TG_CHAT_ID –∏ —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞.")
    except Exception as e:
        print("‚ùå Unexpected Telegram error:")
        traceback.print_exc()
        raise

if __name__ == "__main__":
    main()
